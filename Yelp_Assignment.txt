Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
*****************
SQL Code:
select count(*)
from table
****************
Note: replace 'table' in the code with the database which you want to query.
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000( primary key: id)
ii. Hours = 1562( foreign key: business_id)
iii. Category = 2643( foreign key: business_id)
iv. Attribute = 1115(foreign key: business_id)
v. Review = 10000(primary key: id)
vi. Checkin = 493(foreign key: business_id)
vii. Photo = 10000(primary key: id)
viii. Tip = 3979( foreign key: business_id)
ix. User = 10000(primary key: id)
x. Friend = 11(foreign key: user_id)
xi. Elite_years = 2780(foreign key: user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	
*************************************
SQL Code:
select count( distinct(key) )
from table
*************************************
Note: put the table name in place of 'table' and the key name in place of 'key' in the code.


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

Answer: no

SQL code used to arrive at answer:

select count(*)
from user
where id is null
or name is null
or review_count is null
or yelping_since is null
or useful is null
or funny is null
or cool is null
or fans is null
or average_stars is null
or compliment_hot is null
or compliment_more is null
or compliment_profile is null
or compliment_cute is null
or compliment_list is null
or compliment_note is null
or compliment_plain is null
or compliment_cool is null
or compliment_funny is null
or compliment_writer is null
or compliment_photos is null
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1.0		max: 5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995
**********************************************************************
SQL Code
select min(column), max(column), avg(column)
from table
**********************************************************************
Note: put the table name in place of 'table' and the column name in place of 'column' in the code.		


5. List the cities with the most reviews in descending order:

SQL code used to arrive at answer:
	
select city, sum(review_count) as total_review
from business
group by city
order by total_review desc

	
Copy and Paste the Result Below:
+-----------------+--------------+
| city            | total_review |
+-----------------+--------------+
| Las Vegas       |        82854 |
| Phoenix         |        34503 |
| Toronto         |        24113 |
| Scottsdale      |        20614 |
| Charlotte       |        12523 |
| Henderson       |        10871 |
| Tempe           |        10504 |
| Pittsburgh      |         9798 |
| Montréal        |         9448 |
| Chandler        |         8112 |
| Mesa            |         6875 |
| Gilbert         |         6380 |
| Cleveland       |         5593 |
| Madison         |         5265 |
| Glendale        |         4406 |
| Mississauga     |         3814 |
| Edinburgh       |         2792 |
| Peoria          |         2624 |
| North Las Vegas |         2438 |
| Markham         |         2352 |
| Champaign       |         2029 |
| Stuttgart       |         1849 |
| Surprise        |         1520 |
| Lakewood        |         1465 |
| Goodyear        |         1155 |
+-----------------+--------------+
(Output limit exceeded, 25 of 362 total rows shown)


	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

select stars, count(stars) as freq_stars
from business
where city== 'Avon'
group by stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------+------------+
| stars | freq_stars |
+-------+------------+
|   1.5 |          1 |
|   2.5 |          2 |
|   3.5 |          3 |
|   4.0 |          2 |
|   4.5 |          1 |
|   5.0 |          1 |
+-------+------------+


ii. Beachwood

SQL code used to arrive at answer:

select stars, count(stars) as freq_stars
from business
where city== 'Beachwood'
group by stars


Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------+------------+
| stars | freq_stars |
+-------+------------+
|   2.0 |          1 |
|   2.5 |          1 |
|   3.0 |          2 |
|   3.5 |          2 |
|   4.0 |          1 |
|   4.5 |          2 |
|   5.0 |          5 |
+-------+------------+		


7. Find the top 3 users based on their total number of reviews:
		
SQL code used to arrive at answer:

select name, review_count
from user
order by review_count desc
limit 3
		
Copy and Paste the Result Below:

+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+

		


8. Does posing more reviews correlate with more fans?

Please explain your findings and interpretation of the results:
Posing more reviews do not necessarily correlate with having more fans.
This can be seen by running the SQL code stated below. We see that users with higher number of reviews do not necessarily have more fans. There are many users, where the number of reviews is less
but the fan bse is high.
Example: Amy has the highest number of fans, but only 503 reviews have been given by her. In contrast, Gerald gave 2000 reviews, but is ranked 4th in the number of fans.

****************************
SQL Code:
select name, review_count, fans
from user
order by fans desc
*****************************

	

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

Answer:
From the SQL query outputs below, we see that reviews with the word 'love' occur more than 'hate'.
	
	
SQL code used to arrive at answer:

For love:

select count(*)
from review
where text like '%love%'

Output:

+----------+
| count(*) |
+----------+
|     1780 |
+----------+


For hate:

select count(*)
from review
where text like '%hate%'

Output:
+----------+
| count(*) |
+----------+
|      232 |
+----------+

	
	
10. Find the top 10 users with the most fans:

SQL code used to arrive at answer:

select name, fans, count(fans) as fan_count
from user
group by name
order by fan_count desc
limit 10

select name, fans
from user
order by fans desc
limit 10	
	
Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

City selected: Las Vegas.
Category selected: Food

i. Do the two groups you chose to analyze have a different distribution of hours?

On running the query, we see that, for Food category, in Las Vegas, the 2.5 star places are open from 8:00 to 22:00 whie the 4 star places are open from 10:00 to 19:00.
Hence there is a difference in the distribution of their hours, wrt the star ratings.

SQL code used for analysis::

select b.city,c.category, b.stars, h.hours
from( business b
inner join category c
on b.id= c.business_id )
inner join hours h on h.business_id= b.id
where b.city= 'Las Vegas'
and c.category= 'Food'
group by b.stars


ii. Do the two groups you chose to analyze have a different number of reviews?

On running the query, we see that the 2.5 star places have less reviews(6), while the 4 star places have higher number of reviews(30). Hence, the review count is highly different between the low star and high star outlets.

SQL code used for analysis::

select b.city,c.category, b.stars, b.review_count
from( business b
inner join category c
on b.id= c.business_id )
where b.city= 'Las Vegas'
and c.category= 'Food'
group by b.stars        
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

On running the query, we see that, the 2.5 star outlets are located at Eastside, while the 4 stars are located at Southeast. Other than this, we cannot infer much from the location information.
Someone, with location knowledge about these two areas might be able to throw some light on this.

SQL code used for analysis::

select b.city,c.category, b.stars, b.neighborhood, b.address
from( business b
inner join category c
on b.id= c.business_id )
where b.city= 'Las Vegas'
and c.category= 'Food'
group by b.stars

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
The businesses that are closed have an average rating of 3.52, with around 9217 reviews.
The businesses that are open have an average rating of 3.76 with around 175821 reviews.
Hence, the open businesses have higher number of reviews than the closed ones.
         
ii. Difference 2:
The business that are open are listed more as useful, funny and cool than the ones that are closed.
         
         
SQL code used for analysis:

select  b.is_open, avg(b.stars) as avg_stars, sum(b.review_count) as tot_review, count(r.useful), count(r.funny), count(r.cool)
from business b
inner join review r
on b.id= r.business_id
group by b.is_open
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

To check for the sentiment distribution of the reviews, for the open and closed businesses.
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

I use the business data with the corresponding reviews data. This is done by combining the information about the business with their respective reviews. This then helps us to analyze what the general review was, for the restaurants that are open agaisnt the ones that are closed.
                  
iii. Output of your finished dataset:
 
+---------+---------------+---------------+-------------+--------------+-------------+------------+------------------+-----------------+----------------+
| is_open |     avg_stars | total_reviews | count(b.id) | Useful_count | funny_count | cool_count | Useful_zerocount | funny_zerocount | cool_zerocount |
+---------+---------------+---------------+-------------+--------------+-------------+------------+------------------+-----------------+----------------+
|       0 | 3.54225352113 |          9217 |          71 |           34 |           8 |         16 |               37 |              63 |             55 |
|       1 |  3.7610619469 |        175821 |         565 |          210 |          85 |        116 |              355 |             480 |            449 |
+---------+---------------+---------------+-------------+--------------+-------------+------------+------------------+-----------------+----------------+
        
         
iv. Provide the SQL code you used to create your final dataset:

select b.is_open,avg(b.stars) as avg_stars,sum(b.review_count) as total_reviews , count(b.id),
(select count(*) from business b1,review r1 where b1.id = r1.business_id and b1.is_open = b.is_open and r1.useful > 0) as Useful_count,
(select count(*) from business b1,review r1 where b1.id = r1.business_id and b1.is_open = b.is_open and r1.funny> 0) as funny_count,
(select count(*) from business b1,review r1 where b1.id = r1.business_id and b1.is_open = b.is_open and r1.cool> 0) as cool_count,
(select count(*) from business b1,review r1 where b1.id = r1.business_id and b1.is_open = b.is_open and r1.useful= 0) as Useful_zerocount,
(select count(*) from business b1,review r1 where b1.id = r1.business_id and b1.is_open = b.is_open and r1.funny= 0) as funny_zerocount,
(select count(*) from business b1,review r1 where b1.id = r1.business_id and b1.is_open = b.is_open and r1.cool= 0) as cool_zerocount
from business b,review r
where b.id = r.business_id
group by b.is_open